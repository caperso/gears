{"version":3,"sources":["components/code-paper/CodePaper.tsx","components/web-frame/index.tsx","components/image-preview/demo.tsx","components/levels/OneLevel.tsx","components/levels/Levels.tsx","components/levels/demo.tsx","components/loading/index.tsx","pages/Component/index.tsx","pages/Home/index.tsx","config/index.ts","components/code-paper/demo.tsx","components/loading/demo.tsx","pages/NotFound/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/image/panda.png"],"names":["CodePaper","props","textarea","useRef","className","ref","defaultValue","text","handleClick","onClick","current","value","buttonText","WebFrame","url","src","title","Panel","Collapse","OneLevel","level","depth","route","useState","window","location","pathname","match","active","setActive","replaceRoute","replace","changeRoute","console","log","key","name","classNameGenerator","item","s","static","activeLevel","style","color","undefined","paddingLeft","Levels","data","fontSize","map","recursiveRender","lastRoute","deep","deepItem","levels","Loading","Component","routes","RouteWithSubRoutes","Meta","routeConfig","icon","exact","component","hour","Date","getHours","hello","span","avatar","marginTop","size","img","description","length","inMenu","path","showDefault","setShowDefault","showWebImage","setShowWebImage","webImageUrl","setWebImageUrl","useEffect","localStorage","getItem","alt","fixed","visible","onClose","setItem","defaultActiveKey","onChange","header","levelData","setLevelData","JSON","stringify","parse","error","message","info","NotFound","Header","Sider","Content","SubMenu","render","withRouter","collapsed","setCollapsed","toggle","isMobile","test","navigator","userAgent","menuTitle","routeItem","SettingTwoTone","width","trigger","reverseArrow","collapsible","theme","mode","defaultSelectedKeys","defaultOpenKeys","subItem","Item","to","CheckCircleTwoTone","background","padding","MenuUnfoldOutlined","MenuFoldOutlined","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fc0e76d9.chunk.js","sourcesContent":["import { Button } from 'antd';\nimport React, { useRef } from 'react';\nimport './index.scss';\ninterface Props {\n    text: string;\n    buttonText?: string;\n    className?: string;\n    handleClick?: (text: string) => void;\n}\n\nexport const CodePaper = (props: Props) => {\n    const textarea = useRef<HTMLTextAreaElement>(null);\n    const updateChanges = () => {\n        const text = textarea.current!.value;\n        if (props.handleClick) {\n            props.handleClick(text);\n        }\n    };\n    return (\n        <div className=\"g-code-paper-wrapper\">\n            <textarea ref={textarea} defaultValue={props.text} className={`g-code-paper-textarea ${props.className}`} />\n            {props.handleClick && <Button onClick={updateChanges}>{props.buttonText ? props.buttonText : '更新数据'}</Button>}\n        </div>\n    );\n};\n","import React from 'react';\nimport './index.scss';\n\nexport const WebFrame = (props: { url: string }) => {\n    const { url = '' } = props;\n    return <iframe src={url} className=\"g-frame\" title='placeholder'></iframe>;\n};\n","import Collapse from 'antd/lib/collapse/Collapse';\nimport { CodePaper } from 'components/code-paper/CodePaper';\nimport { WebFrame } from 'components/web-frame';\nimport { ImagePreview } from 'gas-pedal';\nimport React, { useEffect, useState } from 'react';\nimport img from '../../assets/image/panda.png';\nimport './demo.scss';\n\nconst { Panel } = Collapse;\n\nexport const ImagePreviewDemo = () => {\n    const [showDefault, setShowDefault] = useState(false);\n    const [showWebImage, setShowWebImage] = useState(false);\n    const [webImageUrl, setWebImageUrl] = useState('');\n\n    const showDefaultModal = () => {\n        setShowDefault(true);\n    };\n\n    const showModal = (text: string) => {\n        if (text) {\n            setWebImageUrl(text);\n            localStorage.setItem('image-preview-url', text);\n        }\n        setShowWebImage(true);\n    };\n\n    const closeDefaultPreview = () => {\n        setShowDefault(false);\n    };\n\n    const closePreview = () => {\n        setShowWebImage(false);\n    };\n\n    // 加载本地缓存url\n    useEffect(() => {\n        const text = localStorage.getItem('image-preview-url');\n        if (text) {\n            setWebImageUrl(text);\n        }\n    }, []);\n\n    function callback(key: any) {\n        console.log(key);\n    }\n\n    return (\n        <div>\n            <h3>组件名称：图片预览（ImagePreview）</h3>\n            <h4>基础操作: 滚轮缩放 旋转 重置</h4>\n            <br />\n\n            <div className=\"g-table\">\n                <>\n                    <h4>示例图片</h4>\n                    <img src={img} alt=\"图片\" onClick={showDefaultModal} />\n                    <ImagePreview url={img} fixed={true} visible={showDefault} onClose={closeDefaultPreview} />\n                    <br />\n                </>\n                <>\n                    <h4>网络图片</h4>\n\n                    <p>将想要测试图片地址输入(空白使用默认图片)</p>\n                    <CodePaper text={webImageUrl} handleClick={showModal} buttonText=\"显示预览\" className=\"small-size\" />\n                    <ImagePreview url={webImageUrl} fixed={true} visible={showWebImage} onClose={closePreview} />\n                </>\n            </div>\n\n            <Collapse defaultActiveKey={['0']} onChange={callback}>\n                <Panel header=\"文档\" key=\"1\">\n                    <WebFrame url=\"https://caperso.github.io/gas-pedal/image-preview\"></WebFrame>\n                </Panel>\n            </Collapse>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport './index.scss';\nimport { Level } from './Levels';\n\ninterface Props {\n    level: Level;\n    depth: number;\n    route: string;\n    fontSize: number;\n}\n\nexport const OneLevel = (props: Props) => {\n    const { level, depth, route } = props;\n\n    const renderRouteCheck = () => {\n        const path = window.location.pathname;\n        const result = !!path.match(route);\n        return result;\n    };\n\n    const [active, setActive] = useState<boolean>(renderRouteCheck());\n\n    const activeLevel = (item: Level, route: string) => {\n        setActive(s => !s);\n        return item.static ? replaceRoute(item.route) : changeRoute(route);\n    };\n\n    const replaceRoute = (route: string) => window.location.replace(route);\n\n    const changeRoute = (route: string) => console.log(route);\n\n    const classNameGenerator = (depth: number) => {\n        return `g-levels-link ${depth ? 'g-small-font' : ''}`;\n    };\n\n    return (\n        <div\n            key={level.name}\n            className={classNameGenerator(depth)}\n            onClick={() => activeLevel(level, route)}\n            style={active ? { color: '#2dc6ad' } : undefined}\n        >\n            <span style={{ paddingLeft: `${depth}em` }}></span>\n            {level.name}\n        </div>\n    );\n};\n","import React from 'react';\nimport './index.scss';\nimport { OneLevel } from './OneLevel';\n\nexport type LevelProps = {\n    name: string;\n    route: string;\n};\n\n// 静态url-Level\ninterface StaticLevel extends LevelProps {\n    static: true;\n    deep?: null;\n}\n\n// 层级动态url-Level\ninterface LayerLevel extends LevelProps {\n    static?: false;\n    deep?: Level[];\n}\n\nexport type Level = StaticLevel | LayerLevel;\n\ninterface Props {\n    data: Level[];\n    fontSize?: number;\n}\n\nexport const Levels = (props: Props) => {\n    const { data, fontSize = 45 } = props;\n    // const [activeUrl, setActiveUrl] = useState('');\n\n    /**\n     * 递归渲染层级菜单\n     * @param {Level} item\n     * @param {number} [depth=0]\n     * @param {string} [lastUrl]\n     * @returns {React.ReactNode}\n     */\n    const recursiveRender = (item: Level, depth: number = 0, lastRoute?: string): React.ReactNode => {\n        const route = lastRoute ? `${lastRoute}/${item.route}` : item.route;\n        return (\n            <div key={item.name}>\n                <OneLevel level={item} depth={depth} route={route} fontSize={fontSize} />\n                {item.deep && item.deep.map((deepItem: Level) => recursiveRender(deepItem, depth + 1, route))}\n            </div>\n        );\n    };\n\n    return <div className=\"g-levels-wrapper\">{data.map((item: Level) => recursiveRender(item))}</div>;\n    //  return <div className=\"wrapper\">{props.data.map((item: LevelProps) => <OneLevel item={item} depth={}></OneLevel>)}</div>;\n};\n","import { CodePaper } from 'components/code-paper/CodePaper';\nimport React, { useState } from 'react';\nimport { Level, Levels } from './Levels';\n\nconst levels: Level[] = [\n    { name: 'Pipeline', route: 'pipeline' },\n    { name: 'Github', route: 'https://github.com/', static: true },\n    {\n        name: 'Ground',\n        route: 'ground',\n        deep: [\n            {\n                name: 'Solid',\n                route: 'solid',\n                deep: [\n                    { name: 'Dust', route: 'dust' },\n                    { name: 'Germ', route: 'germ' },\n                ],\n            },\n            { name: 'Liquid', route: 'liquid' },\n        ],\n    },\n];\n\nexport const LevelsDemo = () => {\n    const [levelData, setLevelData] = useState(levels);\n\n    const handleChange = (text: string) => {\n        try {\n            setLevelData(JSON.parse(text));\n        } catch {\n            console.error('error: INVALID JSON ARRAY FORMAT');\n        }\n    };\n    return (\n        <div className=\"demo-levels-wrapper\">\n            <h3>组件名称：层级导航（Levels）</h3>\n            <h4>(开发中)</h4>\n            <h4>示例</h4>\n            当前数据:\n            <CodePaper text={`${JSON.stringify(levels)}`} handleClick={handleChange} />\n            <Levels data={levelData}></Levels>\n        </div>\n    );\n};\n","import React from 'react'\nimport './index.scss'\n\n\nexport const Loading = (props: { handleClick?: () => void }) => {\n    return <span className=\"g-icon-rotate\" onClick={props.handleClick} />\n}\n\n","\nimport React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { RouteWithSubRoutes } from '../../App';\nimport './style.scss';\n\ninterface ICompProps {\n  routes: any[];\n}\n\nconst Component = ({ routes }: ICompProps) => {\n  return (\n    <div className=\"p-comp\">\n      <Switch>\n        {routes.map((route: any) => (\n          <RouteWithSubRoutes key={route.key} {...route} />\n        ))}\n      </Switch>\n    </div>\n  );\n};\n\nexport default Component;","import { Avatar, Card, Col, Row, Statistic } from 'antd';\nimport { routeConfig } from 'config';\nimport React from 'react';\nimport img from '../../assets/image/panda.png';\nimport './style.scss';\n\nconst { Meta } = Card;\n\nconst Home = () => {\n    const hour = new Date().getHours();\n    let hello =\n        hour >= 12 && hour <= 17\n            ? '下午好, 记得多起来动动'\n            : hour >= 17 && hour <= 23\n            ? '晚上好, 要多多玩耍~'\n            : hour > 23 || hour < 5\n            ? '深夜了, 快休息吧'\n            : '早上好, 迎接一天最好的阳光';\n\n    return (\n        <div className=\"p-home\">\n            <h3> 组件平台 </h3>\n            <Row>\n                <Col span={20}>\n                    <Meta\n                        avatar={<Avatar style={{ marginTop: 5 }} size=\"large\" src={img} />}\n                        title={`${hello}`}\n                        description=\"组件目录在侧栏, 请选择查看\"\n                    />\n                </Col>\n                <Col style={{ marginTop: -13 }} span={4}>\n                    <Statistic title=\"当前组件总数\" value={routeConfig[1].routes?.length} />\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default Home;\n","// components\nimport { CodePaperDemo } from 'components/code-paper/demo';\nimport { ImagePreviewDemo } from 'components/image-preview/demo';\nimport { LevelsDemo } from 'components/levels/demo';\nimport { LoadingDemo } from 'components/loading/demo';\nimport Component from 'pages/Component';\nimport Home from '../pages/Home';\n\nexport interface IRouteSubs {\n    key: string;\n    title: string;\n    path: string;\n    icon?: string;\n    exact?: boolean;\n    component: React.ComponentType<any>;\n}\n\nexport interface IRouteConfigs {\n    key: string;\n    title: string;\n    path: string;\n    icon?: string;\n    exact?: boolean;\n    component: React.ComponentType<any>;\n    inMenu?: boolean;\n    hide?: boolean;\n    routes?: Array<IRouteSubs>;\n}\n\nexport const routeConfig: IRouteConfigs[] = [\n    {\n        key: 'home',\n        icon: 'home',\n        title: '首页',\n        exact: true,\n        component: Home,\n        inMenu: true,\n        path: '/',\n    },\n    {\n        key: 'comp',\n        icon: 'gold',\n        title: '组件',\n        inMenu: true,\n        component: Component,\n        path: '/comp',\n        routes: [\n            {\n                key: 'image-preview',\n                title: '图片预览 · ImagePreview',\n                component: ImagePreviewDemo,\n                path: '/comp/image-preview',\n            },\n            {\n                key: 'levels',\n                title: '阶级导航 · Levels',\n                component: LevelsDemo,\n                path: '/comp/levels',\n            },\n            {\n                key: 'code-paper',\n                title: '代码块 · CodePaper',\n                component: CodePaperDemo,\n                path: '/comp/code-paper',\n            },\n            {\n                key: 'loading',\n                title: '加载 · Loading',\n                component: LoadingDemo,\n                path: '/comp/loading',\n            },\n        ],\n    },\n];\n","import { message } from 'antd'\nimport React from 'react'\nimport { CodePaper } from './CodePaper'\n\nexport const CodePaperDemo = () => {\n    const handleClick = (text: string) =>{\n        message.info(text)\n    }\n    return (\n        <div>\n            <h3>代码块</h3>\n            <CodePaper text='' handleClick={handleClick} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { Loading } from '.';\n\nexport const LoadingDemo = () => {\n    return (\n        <div>\n            <Loading></Loading>\n        </div>\n    );\n};\n","import React from 'react'\n\nexport const NotFound = () => {\n    return (\n        <div>\n            NOTFOUND\n        </div>\n    )\n}\n","import { CheckCircleTwoTone, MenuFoldOutlined, MenuUnfoldOutlined, SettingTwoTone } from '@ant-design/icons';\nimport { Layout, Menu } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { NavLink, Route, Switch, withRouter } from 'react-router-dom';\nimport './App.scss';\nimport { IRouteConfigs, routeConfig } from './config/index';\nimport { NotFound } from './pages/NotFound';\nconst { Header, Sider, Content } = Layout;\nconst { SubMenu } = Menu;\n\n/**\n * returns nested routes\n * @param {IRouteConfigs} route\n * @returns\n */\nexport function RouteWithSubRoutes(route: IRouteConfigs) {\n    return (\n        <Route\n            path={route.path}\n            render={props => (\n                // pass the sub-routes down to keep nesting\n                <route.component {...props} routes={route.routes} />\n            )}\n        />\n    );\n}\n\nconst App: React.FC = () => {\n    const [collapsed, setCollapsed] = useState(false);\n\n    const toggle = () => setCollapsed(!collapsed);\n\n    useEffect(() => {\n        let isMobile = /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i.test(\n            navigator.userAgent,\n        );\n        setCollapsed(!!isMobile);\n    }, []);\n\n    const menuTitle = (routeItem: IRouteConfigs) => (\n        <span>\n            <SettingTwoTone />\n            <span>{routeItem.title}</span>\n        </span>\n    );\n\n    const renderItems = () => {\n        return routeConfig.map(routeItem => {\n            return routeItem.routes ? (\n                <SubMenu key={routeItem.key} title={menuTitle(routeItem)}>\n                    {routeItem.routes.map(subItem => (\n                        <Menu.Item key={subItem.key}>\n                            <NavLink to={subItem.path}>\n                                {subItem.icon && <CheckCircleTwoTone />}\n                                <span>{subItem.title}</span>\n                            </NavLink>\n                        </Menu.Item>\n                    ))}\n                </SubMenu>\n            ) : routeItem.component ? (\n                <Menu.Item key={routeItem.key}>\n                    <NavLink to={routeItem.path}>\n                        {routeItem.icon && <CheckCircleTwoTone />}\n                        <span>{routeItem.title}</span>\n                    </NavLink>\n                </Menu.Item>\n            ) : null;\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <Layout>\n                <Sider width={250} trigger={null} reverseArrow collapsible collapsed={collapsed}>\n                    <div className=\"logo\" />\n                    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['home']} defaultOpenKeys={['comp']}>\n                        {renderItems()}\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{ background: '#fff', padding: 0 }}>\n                        {collapsed ? (\n                            <MenuUnfoldOutlined onClick={toggle} className=\"trigger\" />\n                        ) : (\n                            <MenuFoldOutlined onClick={toggle} className=\"trigger\" />\n                        )}\n                        折叠\n                    </Header>\n                    <Content className=\"App-content\">\n                        <Switch>\n                            123\n                            {routeConfig.map(route => (\n                                <RouteWithSubRoutes key={route.key} {...route} />\n                            ))}\n                            <Route component={NotFound} />\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        </div>\n    );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/panda.6c7f1359.png\";"],"sourceRoot":""}