{"version":3,"sources":["assets/image/panda.png","components/empty-line/EmptyLine.tsx","pages/Home/index.tsx","config/index.ts","pages/Component/index.tsx","components/empty-line/demo.tsx","pages/NotFound/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EmptyLine","height","className","style","Meta","routeCfg","key","icon","title","exact","component","hour","Date","getHours","hello","span","avatar","marginTop","size","src","img","description","value","routes","length","inMenu","path","NotFound","Header","Sider","Content","SubMenu","RouteWithSubRoutes","route","render","props","withRouter","useState","collapsed","setCollapsed","menuTitle","routeItem","type","trigger","collapsible","theme","mode","defaultSelectedKeys","defaultOpenKeys","map","subItem","Item","to","background","padding","onClick","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66e67e74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/panda.6c7f1359.png\";","import React from 'react';\nimport './index.scss';\nexport interface IEmptyLineProps {\n    height?: number;\n}\n\nconst EmptyLine = ({ height = 20 }: IEmptyLineProps) => {\n    return <div className=\"empty-line\" style={{ height }} />;\n};\n\nexport default EmptyLine;\n","import { Avatar, Card, Col, Row, Statistic } from 'antd';\nimport { routeCfg } from 'config';\nimport React from 'react';\nimport img from '../../assets/image/panda.png';\nimport './style.less';\n\nconst { Meta } = Card;\n\nconst Home = () => {\n    const hour = new Date().getHours();\n    let hello = hour >= 12 && hour <= 17 ? '下午好' : hour >= 17 && hour <= 24 ? '晚上好' : '早上好';\n\n    return (\n        <div className=\"p-home\">\n            <h3> 组件平台 </h3>\n            <Row>\n                <Col span={20}>\n                    <Meta\n                        avatar={<Avatar style={{ marginTop: 5 }} size=\"large\" src={img} />}\n                        title={`${hello}`}\n                        description=\"组件目录在侧栏, 请选择查看\"\n                    />\n                </Col>\n                <Col style={{ marginTop: -13 }} span={4}>\n                    <Statistic title=\"当前组件总数\" value={routeCfg[1].routes?.length} />\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default Home;\n","// components\nimport { EmptyLineDemo } from '../components/empty-line/demo';\nimport { Component } from '../pages/Component';\nimport Home from '../pages/Home';\n\nexport interface IRouteSubProps {\n  key: string;\n  title: string;\n  path: string;\n  icon?: string;\n  exact?: boolean;\n  component: React.ComponentType<any>;\n}\n\nexport interface IRouteCfgProps {\n  key: string;\n  title: string;\n  path: string;\n  icon?: string;\n  exact?: boolean;\n  component: React.ComponentType<any>;\n  inMenu?: boolean;\n  hide?: boolean;\n  routes?: Array<IRouteSubProps>;\n}\n\nexport const routeCfg: IRouteCfgProps[] = [\n  {\n    key: 'home',\n    icon: 'home',\n    title: '首页',\n    exact: true,\n    component: Home,\n    inMenu: true,\n    path: '/',\n  },\n  {\n    key: 'comp',\n    icon: 'gold',\n    title: '组件',\n    inMenu: true,\n    component: Component,\n    path: '/comp',\n    routes: [\n    //   {\n    //     key: 'card',\n    //     title: '卡片·Card',\n    //     component: Card,\n    //     path: '/comp/card',\n    //   },\n    //   {\n    //     key: 'descriptions',\n    //     title: '简介·Descriptions',\n    //     component: Descriptions,\n    //     path: '/comp/descriptions',\n    //   },\n      {\n        key: 'empty-line',\n        title: '空行·EmptyLine',\n        component: EmptyLineDemo,\n        path: '/comp/empty-line',\n      },\n    ],\n  },\n];","import React from 'react'\n\nexport const Component = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport { EmptyLine } from '../empty-line';\n\nexport const EmptyLineDemo = () => {\n    return (\n        <div>\n            <h3>组件名称：空行（EmptyLine）</h3>\n            <p>自定义组件，默认高度 20 ，宽度 100%</p>\n            <p>第一行文字</p>\n            <EmptyLine />\n            <p>第二行文字</p>\n        </div>\n    );\n};\n","import React from 'react'\n\nexport const NotFound = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n","import { Icon, Layout, Menu } from 'antd';\nimport React, { useState } from 'react';\nimport { NavLink, Route, Switch, withRouter } from 'react-router-dom';\nimport './App.less';\nimport { IRouteCfgProps, routeCfg } from './config/index';\nimport { NotFound } from './pages/NotFound';\nconst { Header, Sider, Content } = Layout;\nconst { SubMenu } = Menu;\n\nexport function RouteWithSubRoutes(route: IRouteCfgProps) {\n    return (\n        <Route\n            path={route.path}\n            render={props => (\n                // pass the sub-routes down to keep nesting\n                <route.component {...props} routes={route.routes} />\n            )}\n        />\n    );\n}\n\nconst App: React.FC = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const toggle = () => setCollapsed(!collapsed);\n\n    const menuTitle = (routeItem: IRouteCfgProps) => (\n        <span>\n            {routeItem.icon && <Icon type={routeItem.icon} />}\n            <span>{routeItem.title}</span>\n        </span>\n    );\n\n    return (\n        <div className=\"App\">\n            <Layout>\n                <Sider trigger={null} collapsible collapsed={collapsed}>\n                    <div className=\"logo\" />\n                    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['home']} defaultOpenKeys={['comp']}>\n                        {routeCfg.map(routeItem => {\n                            return routeItem.routes ? (\n                                <SubMenu key={routeItem.key} title={menuTitle(routeItem)}>\n                                    {routeItem.routes.map(subItem => (\n                                        <Menu.Item key={subItem.key}>\n                                            <NavLink to={subItem.path}>\n                                                {subItem.icon && <Icon type={subItem.icon} />}\n                                                <span>{subItem.title}</span>\n                                            </NavLink>\n                                        </Menu.Item>\n                                    ))}\n                                </SubMenu>\n                            ) : routeItem.component ? (\n                                <Menu.Item key={routeItem.key}>\n                                    <NavLink to={routeItem.path}>\n                                        {routeItem.icon && <Icon type={routeItem.icon} />}\n                                        <span>{routeItem.title}</span>\n                                    </NavLink>\n                                </Menu.Item>\n                            ) : null;\n                        })}\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{ background: '#fff', padding: 0 }}>\n                        <Icon className=\"trigger\" type={collapsed ? 'menu-unfold' : 'menu-fold'} onClick={toggle} />\n                    </Header>\n                    <Content className=\"App-content\">\n                        <Switch>\n                            {routeCfg.map(route => (\n                                <RouteWithSubRoutes key={route.key} {...route} />\n                            ))}\n                            <Route component={NotFound} />\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        </div>\n    );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}